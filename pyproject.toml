[build-system]
requires = ["uv_build>=0.8.17,<0.9.0"]
build-backend = "uv_build"

[project]
name = "wal-fact-checker"
version = "0.1.0"
description = "An advanced multi-agent fact-checking system with hierarchical analysis and adversarial critique"
readme = "README.md"
requires-python = ">=3.13"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
maintainers = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = [
    "fact-checking", 
    "multi-agent", 
    "llm", 
    "research", 
    "verification", 
    "analysis"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

# Core dependencies for the fact-checking system
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "asyncio-throttle>=1.0.0",
    "httpx>=0.25.0",
    "beautifulsoup4>=4.12.0",
    "python-dateutil>=2.8.0",
    "structlog>=23.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "jinja2>=3.1.0",
    "google-adk>=1.14.1",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
]

# Testing with additional tools
testing = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
]

# Production deployment
production = [
    "uvicorn[standard]>=0.23.0",
    "gunicorn>=21.0.0",
]

# Research and analysis tools
research = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/wal-fact-checker"
Documentation = "https://wal-fact-checker.readthedocs.io"
Repository = "https://github.com/yourusername/wal-fact-checker.git"
"Bug Tracker" = "https://github.com/yourusername/wal-fact-checker/issues"
Changelog = "https://github.com/yourusername/wal-fact-checker/blob/main/CHANGELOG.md"

[project.scripts]
fact-check = "wal_fact_checker.cli:main"
wal-checker = "wal_fact_checker.cli:main"

[tool.uv]
# Cache configuration for dynamic metadata
cache-keys = [
    { file = "pyproject.toml" },
    { git = { commit = true } }
]

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wal_fact_checker"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "agent: marks tests related to agent functionality",
    "research: marks tests related to research functionality",
    "critique: marks tests related to critique functionality",
]

[tool.coverage.run]
source = ["wal_fact_checker"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
