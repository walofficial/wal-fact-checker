[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "walfactchecker"
version = "0.1.0"
description = ""
authors = [{ name = "Your Name", email = "your@email.com" }]
dependencies = [
    "google-adk~=1.14.0",
    "langfuse>=2.53.0",
    "openinference-instrumentation-google-adk<=0.1.4",
    "opentelemetry-exporter-gcp-trace~=1.9.0",
    "google-cloud-logging~=3.11.4",
    "google-cloud-secret-manager>=2.20.0",
    "google-cloud-aiplatform~=1.112.0",
    "fastapi~=0.115.8",
    "uvicorn~=0.34.0",
    "psycopg2-binary>=2.9.10",
    "requests>=2.32.0",
    "pydantic>=2.9.0",
    "groq>=0.31.1",
    "structlog>=23.0.0",
    "a2a-sdk[http-server]==0.3.7"
]
requires-python = ">=3.10,<3.14"

[dependency-groups]
dev = ["pytest>=8.3.4", "pytest-asyncio>=0.23.8", "nest-asyncio>=1.6.0"]

[project.optional-dependencies]
jupyter = ["jupyter~=1.0.0"]
lint = [
    "ruff>=0.4.6",
    "mypy~=1.15.0",
    "codespell~=2.2.0",
    "types-pyyaml~=6.0.12.20240917",
    "types-requests~=2.32.0.20240914",
]

[project.urls]
Homepage = "https://github.com/yourusername/walfactchecker"
Documentation = "https://walfactchecker.readthedocs.io"
Repository = "https://github.com/yourusername/walfactchecker.git"
"Bug Tracker" = "https://github.com/yourusername/walfactchecker/issues"
Changelog = "https://github.com/yourusername/walfactchecker/blob/main/CHANGELOG.md"

[project.scripts]
realitycheck = "wal_fact_checkercli:main"

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "RUF", # ruff specific rules
]
ignore = ["E501", "C901"] # ignore line too long, too complex

[tool.ruff.lint.isort]
known-first-party = ["app", "frontend"]

[tool.mypy]
python_version = "3.10"
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true
disallow_subclassing_any = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
follow_imports = "silent"
ignore_missing_imports = true
explicit_package_bases = true
disable_error_code = ["misc", "no-untyped-call", "no-any-return"]
exclude = [".venv"]

[tool.codespell]
ignore-words-list = "rouge"
skip = "./locust_env/*,uv.lock,.venv,./frontend,**/*.ipynb"

[tool.pytest.ini_options]
minversion = "8.0"
pythonpath = "."
asyncio_default_fixture_loop_scope = "function"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "agent: marks tests related to agent functionality",
]

[tool.hatch.build.targets.wheel]
packages = ["app", "frontend"]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
